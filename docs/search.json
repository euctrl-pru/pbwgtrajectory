[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Trajectory-based Operational Performance Assessment",
    "section": "",
    "text": "“Preamble/Front Matters”\nThe PBWG is a multi-regional group aiming to foster the application of performance monitoring and benchmarking of air navigation services and air transport under the ICAO GANP.\nThis Technical Note summarises the (initial) development and refinement of trajectory based analytics.\nAs a first application use case, the group is interested in studying vertical flight efficiency in the arrival and departure phase.\nTo support the development an open trajectory data set is established for a representative subset of the operations studied by the PBWG.\nThe “playground” data is based on a regular data dump provided by Opensky Network(Schäfer et al. 2014).\nThis project is developed as a quarto book on top of the R/RStudio eco-system. For practical reasons the code is jointly developed using the {tidyverse} family. The latter supports readability/development of code for analysts without extensive coding/scripting experience.\n\n\n\n\nSchäfer, Matthias, Martin Strohmeier, Vincent Linders, Ivan Martinovic, and Matthias Wilhelm. 2014. “Bringing up OpenSky: A Large-Scale ADS-b Sensor Network for Research.” In, 8394."
  },
  {
    "objectID": "10_introduction.html",
    "href": "10_introduction.html",
    "title": "1  Introduction",
    "section": "",
    "text": "Note\n\n\n\nWork in progress.\n\nprovide background\ngoal/structure of project/report"
  },
  {
    "objectID": "80_conclusions.html",
    "href": "80_conclusions.html",
    "title": "2  Conclusions",
    "section": "",
    "text": "Note\n\n\n\nThis Technical Note is still under active development.\n\nsummarise what was shown\nprovide pointers for how to download/access the data/reproduce the study\nopen research / next problems\nconcluding remarks"
  },
  {
    "objectID": "90_data-preparation.html",
    "href": "90_data-preparation.html",
    "title": "Data Preparation",
    "section": "",
    "text": "Toy Data\nFor the model development, we create some toy data based on a dataset retrieved from OSN. The data is stored locally (in a central folder one level up). It will be read and then a subset created for this section.\nThe toydata is built for EGLL, EHAM, and EDDF (for now).\nBattle-plan: read in ARP & subset state vectors within radius (e.g. 205NM) around ARP.\nAerodrome information * TODO - query database and subset for study use –&gt; ARP, RWY thresholds * currently done by hand - stored in ./data/aip-arp-rwys.csv\nFor the geo-spatial subsetting we use {sf}.\n# load some AIP points\naip      &lt;- readr::read_csv(\"./data/aip-arp-rwys.csv\", show_col_types = FALSE)\nthis_arp &lt;- aip |&gt; dplyr::filter(ICAO == \"EGLL\", REF == \"ARP\")\n\nsource(\"~/RProjects/PBWG-trajectory/R/cast_sf_utils.R\") # utility functions\nsource(\"~/RProjects/PBWG-trajectory/R/spatial_subset_jormungand.R\") # subset R\nknitr::include_graphics(\"./figures/snapshot-egll-205NM.png\")\n\n\n\n\n\n\n\nFigure 1: Snapshot of state vectors, EGLL, 205NM",
    "crumbs": [
      "Data Preparation"
    ]
  },
  {
    "objectID": "99_references.html",
    "href": "99_references.html",
    "title": "References",
    "section": "",
    "text": "Schäfer, Matthias, Martin Strohmeier, Vincent Linders, Ivan Martinovic,\nand Matthias Wilhelm. 2014. “Bringing up OpenSky: A Large-Scale\nADS-b Sensor Network for Research.” In, 8394."
  },
  {
    "objectID": "90_data-preparation.html#toy-data",
    "href": "90_data-preparation.html#toy-data",
    "title": "Data Preparation",
    "section": "",
    "text": "read in tar-dump\nclean\n\nrename/standardise variable names\ncoerce meter -&gt; feet, time to ymd_hms\n\nTODO - check for missing, fill and/or interpolate to 5 sec\n\npth_up   &lt;- here::here() |&gt; dirname()\ntoy_date &lt;- \"2019-08-01\"\npth_data &lt;- list.files(path = here::here(pth_up, \"__DATA\", \"OSN-dumps\"), pattern = toy_date, full.names = TRUE)\n\nsource(\"./R/osn_read_tar.R\")          # read OSN tar dump\nsource(\"./R/osn_make_nice_names.R\")   # standardise variable names\nsource(\"./R/osn_clean_statevector.R\") # steps to make OSN svs useful\n\nsource(\"./R/coerce_meter_to_feet.R\")  # m --&gt; ft\nsource(\"./R/coerce_unixepoch_to_datetime.R\") # xxxx --&gt; yyyymmdd hh:mm:ss\n\n# load all state vectors for chosen date\n# OSN dumps ~ hourly state vectors ==&gt; loop over all 24 files\nsvs &lt;- purrr::map(.x = pth_data, .f = ~ read_osn_tar_file(.x)) |&gt; \n  dplyr::bind_rows() |&gt; \n  clean_osn_statevectors()\n\n\n\n\n\n# model building\n## pick one airport/ARP\nsvs_apt  &lt;- subset_around_point(svs, this_arp)\n\n## save out for later re-use\n#arrow::write_parquet(svs_apt |&gt; sf::st_drop_geometry(), \"./data/egll_205NM.parquet\")\n\n## show-case\nplot_svs_apt &lt;- ggplot() + geom_sf(data = svs_apt, size = 0.1) +  \n  theme_minimal() +\n  theme(plot.title.position = \"plot\") +\n  labs(title = \"State vectors - EGLL - 205NM\")\nggsave(plot = plot_svs_apt\n       , filename = \"./figures/snapshot-egll-205NM.png\"\n       , dpi = 320, bg = \"white\"\n       , width = 8, height = 5)",
    "crumbs": [
      "Data Preparation"
    ]
  },
  {
    "objectID": "90_data-preparation.html#subsetting-arrival-and-departure-trajectories",
    "href": "90_data-preparation.html#subsetting-arrival-and-departure-trajectories",
    "title": "Data Preparation",
    "section": "Subsetting Arrival and Departure Trajectories",
    "text": "Subsetting Arrival and Departure Trajectories\n\n\n\n\n\n\nNote\n\n\n\nwith toy dataset –&gt; identify arrivals and departures –&gt; label trajectories (maybe before hand, clean trajectories ~ ensure no gaps, etc)\nthen assign landing runway\nthen determine characteristic points (e.g. crossings, level segments)\nSTORE RESULTS IN EVENT-MILESTONE-LIST\n\n\n\nAirport Polygon\nWe define the airport polygon area as a convex hull based on the runway system.\nAs a heuristic we can assume aircraft to land or take-off from an aerodrome operating within this convex hull (at altitudes close to the Field Elevation).\n\n# runway system for EGLL\nthis_rwys &lt;- aip |&gt; dplyr::filter(ICAO == \"EGLL\", TYPE == \"THR\")\n\n# load utility functions \"sf-ing\" runway system stuff\nsource(\"~/RProjects/PBWG-trajectory/R/cast_sf_rwys.R\")\n\n\n\n\n\n\n\nNote\n\n\n\nNOT FULLY SURE WHAT TO DO WITH THIS!\nThe legacy packages maptools, rgdal, and rgeos, underpinning the sp package, which was just loaded, will retire in October 2023. Please refer to R-spatial evolution reports for details, especially https://r-spatial.org/r/2023/05/15/evolution4.html. It may be desirable to make the sf package available; package maintainers should consider adding sf to Suggests:. The sp package is now running under evolution status 2 (status 2 uses the sf package in place of rgdal)\n\n\n\n# plot the thresholds\nthis_rwys_sf_pts &lt;- this_rwys |&gt; cast_latlon_to_pts(.drop_coord = FALSE)\n\n# plot thresholds\np1 &lt;- ggplot() +\n  geom_sf(data = this_rwys_sf_pts, size = 3, color = \"red\")\n\n# plot runways\np2 &lt;- ggplot() +\n  geom_sf(data = this_rwys |&gt; cast_rwy_ls())\n\n# plot extended centerlines\np3 &lt;- ggplot() +\n  geom_sf(data = this_rwys |&gt; cast_rwy_ctr_line_ls())\n\nThe legacy packages maptools, rgdal, and rgeos, underpinning the sp package,\nwhich was just loaded, will retire in October 2023.\nPlease refer to R-spatial evolution reports for details, especially\nhttps://r-spatial.org/r/2023/05/15/evolution4.html.\nIt may be desirable to make the sf package available;\npackage maintainers should consider adding sf to Suggests:.\nThe sp package is now running under evolution status 2\n     (status 2 uses the sf package in place of rgdal)\n\n# plot thresholds and centerline\np4 &lt;- ggplot() +\n  geom_sf(data = this_rwys_sf_pts, size = 2, color = \"red\") +\n  geom_sf(data = this_rwys |&gt; cast_rwy_ctr_line_ls(), aes(color = REF))\n\n(p1 + p2) / (p3 + p4)\n\n\n\n\n\n\n\n\nBased on this, we can construct an “airport box” comprising the runway system and its extended centerlines.\n\napt_box &lt;- this_rwys |&gt; airport_centerline_box()\n\np_apt_box &lt;- ggplot() +\n  geom_sf(data = apt_box)\np_apt_box\n\n\n\n\n\n\n\n\nWe can associate the airport box polygon with H3 indexes.\nNote: The H3 algorithm does not ensure regular hexagons based on the underlying projection choices made. For our purposes, we assume the H3 resolution to broadly respect regularity. Thus, hexagon edge length coincides with radius for the corner points.\nResolution 8 ~ edge length 0.5314km Resolution 10 ~ 0.07586km Resolution 11 ~ 0.02866km\n\napt_box_h3 &lt;- h3::polyfill(apt_box, res = 8) |&gt; h3::h3_to_geo_boundary_sf() \n\np_apt_box +\n  geom_sf(data = apt_box_h3, fill = NA)\n\n\n\n\n\n\n\n\n\n\nSubset Arrivals and Departures\nArrivals and departures are characterised by a runway operation. Thus, the heuristic builds on identifying statevectors (4D LAT/LON positions) at lower altitudes operating within the airport and its extended runway system area.\nWe further assume ILS operations or associated RNAV overlay operations. This assumes a glidepath of 3 degrees, resulting in an approx 1000ft altitude change over 3NM. Accordingly, an arrival flight established on the glide path should be at 1000ft GND at 3NM to the ground point of intercept, 2000ft at 6NM, and 3000ft at 9NM. Departure flights might - depending on their weight - exhibit higher climb rates. However, for the initial climb out safety standards will ensure a stabilised attitude climb.\nFrom a brute-force perspective\n\nsubset data to airport area and ALT = ELEV + 3500ft\n\n\ntoy_data &lt;- arrow::read_parquet(\"./data/egll_205NM.parquet\")\n\n# spatial subset for outer airport runway system box\nat_apt   &lt;- toy_data |&gt; \n  spatial_subset_jormungand(apt_box) |&gt; \n  dplyr::filter(ALT &lt; this_arp$GEOM_ALT + 3500)\n\narrs_deps &lt;- at_apt |&gt; \n  sf::st_drop_geometry() |&gt; \n  dplyr::group_by(ICAO24, FLTID) |&gt; \n  dplyr::filter(TIME %in% c(max(TIME), min(TIME))) |&gt; \n  dplyr::arrange(TIME, .by_group = TRUE) |&gt; \n  dplyr::mutate(\n      SEQ   = dplyr::row_number()\n    , PHASE = dplyr::case_when( dplyr::first(ALT) &gt; dplyr::lead(ALT) ~ \"ARR\"\n                               ,dplyr::first(ALT) &lt; dplyr::lead(ALT) ~ \"DEP\"\n                              )\n        ) |&gt; \n    dplyr::select(TIME, ICAO24, FLTID, LAT, LON, ALT, SEQ, PHASE, dplyr::everything())\n\narrs &lt;- arrs_deps |&gt; \n  dplyr::select(ICAO24, FLTID, PHASE) |&gt; \n  dplyr::filter(PHASE == \"ARR\")\n\ndeps &lt;- arrs_deps |&gt; \n  dplyr::select(ICAO24, FLTID, PHASE) |&gt; \n  dplyr::filter(PHASE == \"DEP\")\n\nFilter the toydata for arrs and plot them\n\narr_trjs &lt;- toy_data |&gt; \n  dplyr::left_join(arrs, by = dplyr::join_by(ICAO24, FLTID)) |&gt;\n  dplyr::filter(PHASE == \"ARR\")\n\narr_trjs |&gt; ggplot() +\n  geom_point(aes(x = LON, y = LAT), size = 0.1)\n\n\n\n\n\n\n\n\nRunway assignment\n\nrwy_cones &lt;- this_rwys |&gt; centerline_cone()  \n\nfill_h3_poly &lt;- function(.sf_poly, .res = 10){\n    .sf_poly |&gt; \n        h3::polyfill(res = .res) |&gt; \n        h3::h3_to_geo_boundary_sf()\n}\n\nrwy_cones_h3 &lt;- rwy_cones |&gt;\n  dplyr::group_by(REF) |&gt; \n  dplyr::group_modify(.f = ~ fill_h3_poly(.) ) |&gt; \n  sf::st_as_sf()\n\n# check what we have\nggplot() +\n  geom_sf(data = rwy_cones, aes(fill = REF)) +\n  geom_sf(data = rwy_cones_h3, aes(fill = NA)) +\n  coord_sf(xlim = c(-0.8,-0.1), ylim = c(51.425,51.525))\n\n\n\n\n\n\n\n\nTrim arrivals to last x-secs * aircraft on final 160kts = 160 NM / 60 min = 16/6 NM/min =~ 2.5 NM/min ==&gt; 10NM ~ 4 min\n\narr_rwy_association &lt;- \n  arr_trjs |&gt; \n  dplyr::select(TIME, ICAO24, FLTID, LAT, LON) |&gt; \n  dplyr::mutate(H3 = h3::geo_to_h3(cbind(LAT, LON), res = 10)) |&gt;\n  dplyr::left_join(\n      rwy_cones_h3 |&gt; \n        dplyr::rename(H3 = h3_index)|&gt; \n        sf::st_drop_geometry()\n      ) |&gt; \n  dplyr::filter(!is.na(REF)) |&gt; \n  dplyr::group_by(ICAO24, FLTID, REF) |&gt; \n  dplyr::summarise(N = dplyr::n(), .groups = \"drop\") |&gt; \n  dplyr::group_by(ICAO24, FLTID) |&gt; \n  dplyr::mutate(GRP = dplyr::cur_group_id()) |&gt; \n  dplyr::ungroup()\n\nJoining with `by = join_by(H3)`\n\n\n\narr_trjs |&gt; \n  dplyr::mutate(UID = paste0(ICAO24, \"-\", FLTID)) |&gt; \n  dplyr::filter(UID %in% (\n        arr_rwy_association |&gt; \n          dplyr::filter(N &lt;= 3) |&gt; \n          dplyr::mutate(UID = paste0(ICAO24, \"-\", FLTID)) |&gt; \n          dplyr::pull(UID))\n        ) |&gt; \n  ggplot() + \n  geom_point(aes(x = LON, y = LAT, color = UID), size = 0.1) + \n  theme(legend.position = \"top\", plot.title.position = \"plot\") +\n  labs(title = \"Data Cleaning - check for flights with small hits in runway area\")\n\n\n\n\n\n\n\n\n\narr_trjs2 &lt;- arr_trjs |&gt; \n    dplyr::mutate(UID = paste0(ICAO24,\"-\", FLTID)) |&gt; \n    dplyr::left_join( \n             arr_rwy_association |&gt; \n                 dplyr::mutate(UID = paste0(ICAO24,\"-\", FLTID)) \n             , by = dplyr::join_by(ICAO24, FLTID, UID))\n\nWarning in dplyr::left_join(dplyr::mutate(arr_trjs, UID = paste0(ICAO24, : Detected an unexpected many-to-many relationship between `x` and `y`.\nℹ Row 6680 of `x` matches multiple rows in `y`.\nℹ Row 346 of `y` matches multiple rows in `x`.\nℹ If a many-to-many relationship is expected, set `relationship =\n  \"many-to-many\"` to silence this warning.\n\n\n\n\nDetermine cut-off point for coverage / gate on final\ntrajectory in h3\narr_trjs2 = arr_trjs2 |&gt; dplyr::select(UID, TIME, ICAO24, FLTID, LAT, LON, ALT, RWY = REF) |&gt; dplyr::mutate(H3 = h3::geo_to_h3(cbind(LAT, LON), res = 10))\ngate_5NM_h3 &lt;- gate_5NM |&gt; sf::st_buffer(dist = 500) |&gt; dplyr::group_by(REF) |&gt; dplyr::group_modify(.f = ~ fill_h3_poly(.) ) |&gt; sf::st_as_sf() |&gt; dplyr::ungroup() |&gt; dplyr::mutate(GATE = paste0(REF, “-5NM”)) |&gt; dplyr::rename(H3 = h3_index)\nSome confusion ==&gt; clean better & assign phase &gt; arr_trjs2 |&gt; dplyr::inner_join(gate_5NM_h3 |&gt; sf::st_drop_geometry(), by = dplyr::join_by(H3)) |&gt; dplyr::filter(RWY != REF) # A tibble: 17 × 11 UID TIME ICAO24 FLTID LAT LON ALT RWY H3 REF GATE            1 4005a6-BAW20R 2019-08-01 05:28:50 4005a6 BAW20R 51.5 -0.305 1575. 27R 8a194a… 27L 27L-… 2 406ec9-BAW45B 2019-08-01 05:30:40 406ec9 BAW45B 51.5 -0.296 1675. 27R 8a194a… 27L 27L-… 3 406a34-BAW246 2019-08-01 05:39:40 406a34 BAW246 51.5 -0.303 1575. 27R 8a194a… 27L 27L-… 4 40093e-SHT1467 2019-08-01 07:22:50 40093e SHT1467 51.5 -0.300 1550. 27R 8a194a… 27L 27L-… 5 400afe-SHT19S 2019-08-01 07:25:10 400afe SHT19S 51.5 -0.295 1575. 27R 8a194a… 27L 27L-… 6 4ca15d-EIN15M 2019-08-01 08:09:40 4ca15d EIN15M 51.5 -0.618 3400. 09L 8a195d… 09R 09R-… 7 4076cd-SHT3P 2019-08-01 08:28:20 4076cd SHT3P 51.5 -0.299 1625. 27R 8a194a… 27L 27L-… 8 400804-BAW982G 2019-08-01 10:59:50 400804 BAW982G 51.5 -0.305 1500. 09L 8a194a… 27L 27L-… 9 406e10-VIR42X 2019-08-01 12:50:30 406e10 VIR42X 51.5 -0.300 1550. 27R 8a194a… 27L 27L-… 10 400613-BAW38P 2019-08-01 12:54:10 400613 BAW38P 51.5 -0.304 1525. 27R 8a194a… 27L 27L-… 11 4076e8-BAW9110 2019-08-01 13:22:50 4076e8 BAW9110 51.5 -0.294 1650. 09L 8a194a… 27L 27L-… 12 4076e8-BAW9110 2019-08-01 13:22:50 4076e8 BAW9110 51.5 -0.294 1650. 09R 8a194a… 27L 27L-… 13 4076e8-BAW9110 2019-08-01 13:23:00 4076e8 BAW9110 51.5 -0.306 1525. 09L 8a194a… 27L 27L-… 14 4076e8-BAW9110 2019-08-01 13:23:00 4076e8 BAW9110 51.5 -0.306 1525. 09R 8a194a… 27L 27L-… 15 4692d0-AEE2EG 2019-08-01 14:33:30 4692d0 AEE2EG 51.5 -0.292 1675. 27L 8a194a… 27R 27R-… 16 4692d0-AEE2EG 2019-08-01 14:33:40 4692d0 AEE2EG 51.5 -0.304 1525. 27L 8a194a… 27R 27R-… 17 4009c7-BAW481B 2019-08-01 18:22:30 4009c7 BAW481B 51.5 -0.301 1525. 27L 8a194a… 27R 27R-…\nggplot(data = arr_trjs2 |&gt; dplyr::filter(UID %in% c(“4692d0-AEE2EG”,“4076e8-BAW9110”,“4005a6-BAW20R”,“406ec9-BAW45B”)) ) + geom_point(aes(x = LON, y = LAT, color = UID), size = 0.5) + xlim(-1,1) + ylim(51.25,51.75)",
    "crumbs": [
      "Data Preparation"
    ]
  }
]